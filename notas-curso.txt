

Inicio proyecto:

    01-bases

    (Cualquier de los dos)
    npm create vite@latest bases    → npm run dev

    npx create-react-app bases --template typescript    →  yarn start (SALE ERROR POR contractor artifactory)


GreenSock para animaciones

    npm install gsap


useRef() → Para capturar un elemento HTML, una mejor alternativa a usar un className
           o un Id. Se usó dentro de un useEffect para darle animación a un <h2> en CounterEffect.tsx



useLayoutEffect() → Cuando nos queremos asegurar de que nuestros objetos HTML ya están construidos



Action Creators:
    - funciones que sirven para retornar un action y evitar errores productos de cambios en los actions originales
    - estos actions creators son llamados en el dispatch()
    - en resumen, son funciones que se encargan de llamar a la accion

    - lo util que veo en esto es que si en lugar de reset quiero llamarle resetear habrían más lugares en el proyecto donde
      debería cambiar ese nombre. pero con actioncreators eso se reduce. Y con el uso de un map con las actions posibles se reduciría
      aún más.




**************************************************************

Inicio proyecto:

     npm create vite@latest react-app
     npm install
     npm run dev

Estamos en 02-react-app

Sistema de rutas react-router-dom v6:
    * La versión 5 es muy diferente y actualmente ya hay v7 (05-02-2025)

    npm install react-router-dom@6


Lazy Load & Suspense:

    - para cargar componentes cuando sea necesario o bajo demanda
    - los componentes son cargados dentro de main.chunk.js ... se puede ver en network del navegador
    - se pueden cargar los componentes por módulos o simplemente por componentes individuales.
    - el index.ts "archivo de barril" puede hacer conflicto con el export default, mejor lo borro y ya
      total solo se usan las importaciones en el Router.ts
    


**************************************************************

Compound Component Pattern

    /02-components-patterns

    ShoppingPage & ProductCard

    - este patron es como un select con varios options
    - Se comenta a 01-lazyload desde el App.tsx para dejar la aplicación con el Home, Users, About

    - children se define como ReactElement | ReactElement[]

    - Se hizo la lógica de tal manera que soporte ambas implementaciones:
        (queda a discreción de cada uno la manera en que se va a trabajar)
        
        <ProductCard product={product}>
            <ProductCard.Image />
            <ProductCard.Title title="Hola Mundo" />
            <ProductCard.Buttons  />
        </ProductCard>

        <ProductCard product={product}>
            <ProductImage />
            <ProductTitle />
            <ProductButtons  />
        </ProductCard>

    - Implica el uso de useContext para compartir props entre Padre(HOC high order Component) e Hijos.

    - Ver los cambios que se hicieron en el barril index.ts para tener las dos formas.

**************************************************************

Extensible Style Pattern

    /02-components-patterns

    - El problema principal es que el <ProductCard> no recibe styles, ni con className, ni con style y lo mismo
      pasa con los elementos del {children}

    - Se puede hacer con dos técnicas(hay que configurar para que reconozca):
        (ambos se pueden combinar)
        - usar className: Se creó un nuevo custom-styles.css y se usó en ShoppingPage.tsx
        - usar style: Se usa con React.CSSProperties


**************************************************************

Control Props

    /02-components-patterns

    - Este patrón generalmente se usa en formularios tradicionales:
            <input
                value={  algún valor de solo lectura }
                onChange={ alguna función que cambia el valor }
            />

    - Sirve para controlar el estado interno de nuestros componentes.


    - La nomenclatura <{ [key: string]: ProductInCart }> significa que son varios keys de tipo string
      y que contienen un objeto ProductInCart. Es raro pero funciona.

        const [shoppingCart, setShoppingCart] = useState<{ [key: string]: ProductInCart }>({
          '1': { ...product1, count: 10},
          '2': { ...product2, count: 2}
        });

    - Todo valor de useRef necesita llamarse con el .current


**************************************************************

State Initializer

    - Ejemplo basado en Formik
    - pusimos dentro de ProductCard los demás componentes como un children en una funcion
    - Luego en productCard llamamos a la funcion children() para que se renderice el contenido

**************************************************************

Despliegue a NPM

    - tsdx
    - Ver la rama feature/despliegue-npm

**************************************************************


Formik


    - Para mayor nivel de control en formularios
    - validaciones, reset, mensajes de error, etc. se pueden hacer con formik.
    - Si se hace un custom-hook veo que son demasiadas las validaciones para el form.

Temas:

    - useFormik
    - Formik Component
    - Formik Context
    - useField
    - Formik Custom Components
    - Custom Components
    - Metadata de los inputs
    - Abstraction
    - Yup
        - Validaciones tipicas
        - Validaciones personalizadas

Sitio:  https://formik.org/


Inicio de proyecto: Se usará 02-react-app en el directorio 03-forms

Desarrollo:

    - Se creó useForm() como customHook sin Formik. Son demasiadas validaciones que hacer
      ahora veré como hacer más dinámico ese manejo.

    - npm i formik

    - Yup: validation schema builder  → npm i yup --save

    - También se ve el manejo de select y checkbox

    - useField() para el manejo de props de formik


**************************************************************

Formularios dinámicos


Temas:
    - Construir inputs de forma dinámica
    - Construir validaciones basados en propiedades
    - Selects, Inputs
    - Ideas para validaciones


Desarrollo:
    - La sección 11 empezó desde RegisterFormikPage.tsx



**************************************************************


StoryBook: Para crear documentación técnica de componentes

    -   Integrar Storybook en una aplicación de React con Npx
    -   Crear un componente desde cero
    -   Crear historias
    -   Configurar historias
    -   Utilizar varios controles para las properties
    -   Integración con TypeScript
    -   Crear documentaciones de componentes
    -   Desplegar documentación a diferentes sitios
    -   Bonus: Chromatic para desplegar Storybook de forma colaborativa


docs: https://storybook.js.org/docs/get-started/frameworks/react-webpack5?renderer=react


Config del proyecto:

    - npm create vite   →   por cuestiones de la cuenta no se puede usar este comando
    - npx create-react-app my-storybook --template typescript
    - npm install
    - npm run start
    - npm create storybook@latest
        - al ejecutar este comando se abre automáticamente una url como esta: http://localhost:6006/?path=/story/example-button--primary&onboarding=false
        - por default vienen ejemplos: Button, Header, Page
    - npm run storybook en el dev de los scripts de package.json (opcional

Cambios en el proyecto:

    - la idea es tomar algún componente del directorio components y llevarlo a /src/stories
    - prácticamente lo único que necesito es crear el archivo .stories.ts del componente que quiero mostrar e ir agregando
      atributos según corresponda para mostrar la parte de docs.
    - cuando se quiere modificar el tipo de forma en la que se quiere mostrar los argTypes, se puede pasar el cursor por el atributo control y te lleva a los docs de Storybook.
    - para el depliegue tomar en cuenta el script de package.json : "build-storybook": "storybook build"
        - ejecutar npm run build-storybook
        - se creará automáticamente la carpeta storybook-static
        - se puede desplegar en Netlify: https://www.netlify.com/ entrando a sites y dejando caer la carpeta que se creó
        - también se puede llevar a GithubPages. Se renombra la carpeta storybook-static por docs.
          (*) Un aporte de un alumno: Para no tener que estar cambiando manualmente el directory storybook-build a docs lo que se puede hacer es personalizar el package.json y,
          en el script de build, dejar lo siguiente: "build": "build-storybook -o docs"
            - crear nuevo repo en Github e inicializarlo en nuestro proyecto de StoryBook
            - En Github Ir a Settings → Pages → Source: Deploy from a branch → escoger /docs → Save
            - Entrar a la url que nos da luego de unos minutos

Bonus:

    - Chromatic: https://www.chromatic.com/
    - Buscar nuestro proyecto de Github al loguearnos con nuestra cuenta.
    - Ir al proyecto → npm add --dev chromatic
    - usar el comando npx chromatic con el token (basicamente seguir las indicaciones de los comandos)
    - se agregó automáticamente un valor de chromatic en el script de package.json. Si cambia el token editamos esta parte.
    - Hasta aquí ya aparece el componente en Chromatic. Para detectar cambios en la UI, se procede a agregar un cambio(en este caso
      un nuevo story de backgroundColor)
    - levantar el proyecto de storybook y ver que está bien el cambio
    - ejecutar el comando de Chromatic que está en el package.json
    - Chromatic tiene features muy interesantes, reconoce builds, se integran cambios, se puede ver una miniatura del cambio, y también
      se puede abrir el storybook que por lo que veo es una instancia deployada en Chromatic.


**************************************************************

Sección 13 - NPM empaquetamiento y publicación

Temas:

    - Preparación de package.json
    - Preparación de tsconfig.json
    - Limpieza de directorios
    - Copiar recursos estáticos
    - Subida y publicación a NPM
    - Versionamiento semántico
    - Versionamiento en GitHub
    - Prueba en otro proyecto
    - Build de producción
    - Actualización de dependencias.


Config:

    - Se usa 03-my-storybook, asegurarse que el proyecto funciona bien con el npm run dev (que compile el Storybook)
    - En package.json
        - "name": "jcv-custom-components"
        - "version": "0.0.1"
        - En el mismo nivel agregar:
            - "keywords": [
                "react", "dev", "julio", "chacon", "course"
            ],
            "license": "MIT",
            "homepage": "https://julio-chacon.com",
            "repository": {
                "url": "https://TODO...",
                "type": git
            },
            "files": [
                "dist/"
            ],
            "release": {
                "branches": [
                    "main"
                ]
            },
        - Mover las dependencias de react que están en dependencies a devDependencies y también ponerlas en peerDependencies
            - "peerDependencies": {
                "react": "18.2.0",
                "react-dom": "18.2.0",
            }

    - En tsconfig.json
        - Reemplazar el contenido por lo que está aquí: https://gist.github.com/Klerith/d7b24a955c714b708479ef911b0837ca
    
    - En package.json en la parte de los scripts en el build solo le deja tsc porque usa vite. Cómo sería en el caso de este proyecto??
    - Ejecutar npm run build
    - Ir resolviendo errores
    - El resultado es la carpeta /dist
    - Cuando creo un nuevo archivo y ejecuto npm run build los demás archivos en /dist se mantienen. Qué pasa cuando ya no necesito esos archivos?
    - Ejecutar npm i -D rimraf (Usarlo con cuidado porque elimina automáticamente)
    - agregar en scripts de package.json: "clean": "rimraf dist/"
    - ejecutar npm run clean y se borra automáticamente /dist
    - en los scripts se dejó el "build": "npm run clean && tsc" Cómo sería en mi caso?? tsc es typescript compiler
    - Para copiar los recursos estáticos como css e imagenes:
        - Ejecutar npm i -D copyfiles            → -D es para instalar como dependencia de desarrollo
        - en scripts "copyfiles": "copyfiles -u 1 src/**/*.css dist/"  → también se puede agregar jpg
        - npm run copyfiles → Ahora si aparece el css
        - Dejar así el "build": "npm run clean && tsc && npm run copyfiles"
        - Lo que hace el comando es borrar dist, crear dist y los archivos, copiar los css
    - npm publish
        - cada vez que se hace un publish la version en package.json debe ser única
        - ejecutar npm login
        - modificar README.md:

            # Componentes creados en el curso de React Pro

            Instalar 

            ```
            npm i jcv-custom-components
            ```

            1. [Componente de botón](#boton)
            2. [Componente de input](#input)
            3. [Componente de select](#select)

        - ejecutar npm publish y validar en la cuenta de npm
    
    - Información adicional del paquete:
        - Crear src/index.ts para agregar las exportaciones     → se agrega para que reconozca typescript nuestro paquete en npm
        - en package.json agregar:
            - "main": "dist/index.js",
              "typings": dist/index.d.ts"
            - cambiar version 0.0.1-rc2
        - agregar un archivo LICENSE (pegar el contenido de MIT)
        - ejecutar npm run build
        - ejecutar npm publish --dry-run  → para una vista previa de lo que se va a subir
        - ejecutar npm publish
    

    - Importar nuestro paquete desde otro proyecto:
        - npm create vite → name : 04-package-consumer
        - npm i
        - npm run dev
        - npm i jcv-custom-components   → saldrá el error de peerDependencies por la versión de react, si es que en el proyecto del package lo dejé
          con una versión 16 o diferente a la que manejo en el proyecto donde quiero importar.
        - Dejar así en el otro proyecto:
            - "peerDependencies": {
                "react": "^16.8.0" || "^17.0.0" || "^18.2.0",
                "react-dom": "^16.8.0" || "^17.0.0" || "^18.2.0"
            }
        - Hacer el build y publish otra vez.
        - npm i jcv-custom-components
        - Agregar (funciona bien):
            <MyLabel label={'Hola Mundo'} allCaps color='text-primary'/>
            <Button label={'Aceptar'} backgroundColor='#fafafa' onClick={() => console.log('click)} />
        - ejecutar npm run build
        - cd dist/
        - http-server -o    (se puede instalar este paquete de npm)
        - se ve que funciona correctamente

    
    - NP - A better npm publish
        - Subir repo 03-my-storybook a un repo de github
        - poner la url del repo en el package.json
        - ejecutar npm i -D np
        - en scripts "push:npm": "np"   → no se puede usar publish
        - ejecutar npm run push:npm
        - version: minor → sale errores entre ellos los engines, commits sin subir y tests
        - Agregar en package.json:
            - "engines": {
                "node": ">12.0.0"
            }
        - en los scripts: "test": "echo 'all tests were good'"
        - commitear cambios no push
        - ejecutar npm run push:npm
        - en github se crea automáticamente el release poner nombre, y publish release
    
    - npm-check-updates
        - en package-consumer ejecutar: sudo npm install -g npm-check-updates
        - ejecutar:
            - ncu --version
            - ncu  → se ve que reconoce cambios en el paquete de npm que hemos modificado
            - ncu -u  → actualiza el paquete
            - npm i  → para asegurarnos que tengamos las ultimas versiones


**************************************************************


Sección 14- Aplicación de React y Backend para PWA


Temas:
    - Tener una aplicación real de React
    - Tener un backend y base de datos
    - Tener una introducción a las PWAs

Links:
    - https://www.mongodb.com/products/platform/atlas-database
    - https://github.com/Klerith/react-calendar-frontend
    - https://github.com/Klerith/react-calendar-backend    


mongodb:
    - create cluster → free
    - name: calendar-database
    - create deployment
    - create access user → privileges: Read and write to any database → tener el user y password a mano
    - obtener cadena de conexión en → database → connect → with mongodb compass
    - la última parte de la cadena es el nombre de la base de datos que se creará

project backend:
    - descargar zip ejecutar npm install
    - en el .env de backend modificar la cadena de conexión de mongo
    - me cambié a la versión 16 de node para evitar conflictos de versiones
    - npm start → debería decir "Servidor corriendo en puerto 4000" y "DB Online"

project fronted:
    - descargar zip ejecutar npm install
    - npm start
    - la aplicación guarda en localStorage un token 
    - registra eventos y se guardan en bd

PWA's y Service Workers:
    - PWA (Progressive Web Application) posteos offline
    - El archivo Service worker es el que convierte una aplicación en PWA
    - Caracteristicas de PWA:
        - Acceso a la aplicación sin conexión
        - Creación de db local
        - Push notifications *
        - uso de recursos nativos como cámara y gps
        - sincronización en segundo plano
        - manejo de cache
        - etc
    - El service worker se convierte en un proxy entre front y back
        - intercepta peticiones
        - está pendiente de notifications push
        - corre en segundo plano
        - maneja el caché
        - no funciona en desarrollo "yarn start"


**************************************************************

Sección 15: React + PWA


Temas:

    -   Service Worker
    -   Caché
    -   Instalación
    -   Fetch
    -   Estrategias del caché
        -   Network first
        -   Cache Only
        -   Network first with cache fallback



Configs para comandos (Opcional, se usó lo que funciona):
    - Si no hay yarn: npm install -g yarn
    - Agregar C:\Users\julio.chacon\AppData\Local\Yarn\bin al PATH de variables de entorno
    

* Levantar backend

Config proyecto front:
    - Ejecutar npm run build en frontend
    - Ejecutar npm install -g serve
    - serve --version
    - serve -s build
    - Ahora la aplicación se levantó desde el build de producción


Crear nuevo proyecto front para adaptar a pwa:

    - Hubieron muchos problemas de versiones y conflictos para crear un nuevo proyecto
      con npx y obtener esos archivos de service worker. Por lo tanto estoy viendo los videos
      para entener de qué se trata y en su momento se replica en versiones más modernas de node.

    - Consiste en tomar los archivos(dos) de service worker, agregar una linea en el index y con eso
      el navegador ya reconoce que la aplicación tiene un SW activo. Se tiene que generar el build de prod y levantar.

    - No es recomendable el "SKIP_WAITING" en el archivo service-worker.
    - Se recomienda ver la docs de service-workers de developers.google.com
    -  
    







**************************************************************


git config --global user.name "Julio Chacon Vilela"
git config --global user.email "jchacon.vilela@gmail.com"



**************************************************************

Temas aprendidos:

- Hooks:
    - useState
    - useEffect
    - useReducer
    - useContext
    -

- Component Patterns
    - Compound Component Pattern: tener un componente padre y definir dentro los hijos.
    - Extensible Style: Para que el componente se adapte a estilos personalizados.
    - Control Props: Mediante props en los componentes se puede manejar el state. Ejemplo del carrito de compras.
    - State Initializer

- Despliegue de componentes a NPM y utilización

- Formik
    - Validations con Yup
    - Custom forms y dynamic forms


- Storybook